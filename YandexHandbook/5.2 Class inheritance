# A

# class Point:
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#     def move(self, a, b):
#         self.x += a
#         self.y += b
#
#     def length(self, name):
#         return round(((name.x - self.x) ** 2 + (name.y - self.y) ** 2) ** 0.5, 2)
#
#
# class PatchedPoint(Point):
#
#     def __init__(self, coordinate=(0, 0), x=0, y=0):
#         super().__init__(x=x, y=y)
#         if self.x == self.y == 0:
#             self.x = coordinate[0]
#             self.y = coordinate[1]
#         elif not isinstance(coordinate, tuple):
#             self.x = coordinate
#             self.y = x
#
#     def __str__(self):
#         return f'{self.x}, {self.y}'


# B

# class Point:
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#     def move(self, a, b):
#         self.x += a
#         self.y += b
#
#     def length(self, name):
#         return round(((name.x - self.x) ** 2 + (name.y - self.y) ** 2) ** 0.5, 2)
#
#
# class PatchedPoint(Point):
#
#     def __init__(self, coordinate=(0, 0), x=0, y=0):
#         super().__init__(x=x, y=y)
#         if self.x == self.y == 0:
#             self.x = coordinate[0]
#             self.y = coordinate[1]
#         elif not isinstance(coordinate, tuple):
#             self.x = coordinate
#             self.y = x
#
#     def __str__(self):
#         return f'({self.x}, {self.y})'
#
#     def __repr__(self):
#         return f'PatchedPoint({self.x}, {self.y})'


# C

# class Point:
#
#     def __init__(self, x, y):
#         self.x = x
#         self.y = y
#
#     def move(self, a, b):
#         self.x += a
#         self.y += b
#
#     def length(self, name):
#         return round(((name.x - self.x) ** 2 + (name.y - self.y) ** 2) ** 0.5, 2)
#
#
# class PatchedPoint(Point):
#
#     def __init__(self, coordinate=(0, 0), x=0, y=0):
#         super().__init__(x=x, y=y)
#         if self.x == self.y == 0:
#             self.x = coordinate[0]
#             self.y = coordinate[1]
#         elif not isinstance(coordinate, tuple):
#             self.x = coordinate
#             self.y = x
#
#     def __add__(self, other):
#         new = PatchedPoint(self.x + other[0], self.y + other[1])
#         return new
#
#     def __iadd__(self, other):
#         self.x += other[0]
#         self.y += other[1]
#         return self
#
#     def __str__(self):
#         return f'({self.x}, {self.y})'
#
#     def __repr__(self):
#         return f'PatchedPoint({self.x}, {self.y})'


# D, E, F, G, H, I, J

# class Fraction:
#
#     def __init__(self, *args):
#         if len(args) == 2 and isinstance(args[0], int):
#             self.ch, self.zn = args[0], args[1]
#         elif len(args) == 2 and isinstance(args[0], str):
#             self.ch, self.zn = int(args[0]), int(args[1])
#         elif len(args) == 1 and isinstance(args[0], int):
#             self.ch = args[0]
#             self.zn = 1
#         elif len(args) == 1 and isinstance(args[0], str) and args[0].find('/') != -1:
#             self.ch, self.zn = list(map(int, args[0].split('/')))
#         elif len(args) == 1 and args[0].find(' ') != -1:
#             self.ch, self.zn = list(map(int, args[0].split()))
#         else:
#             self.ch = int(args[0])
#             self.zn = 1
#         self._nod()
#
#     def _nod(self):
#         a, b = abs(self.ch), abs(self.zn)
#         if a != b:
#             while a % b != 0:
#                 copy = a
#                 a = b
#                 b = copy % b
#             self.ch = self.ch // b
#             self.zn = self.zn // b
#             if self.zn < 0:
#                 self.ch, self.zn = -self.ch, -self.zn
#
#     def numerator(self, number=None):
#         if number is None:
#             return abs(self.ch)
#         else:
#             self.ch = number * (-1 if self.ch < 0 else 1)
#             self._nod()
#
#     def denominator(self, number=None):
#         if number is None:
#             return abs(self.zn)
#         else:
#             self.zn = number
#             self._nod()
#
#     def __str__(self):
#         return f'{self.ch}/{self.zn}'
#
#     def __repr__(self):
#         return f"Fraction({self.ch}, {self.zn})"
#
#     def __neg__(self):
#         return Fraction(-self.ch, self.zn)
#
#     def __add__(self, other):
#         other = Fraction(str(other))
#         new_object = Fraction(self.ch * other.zn + other.ch * self.zn,
#                               self.zn * other.zn)
#         return new_object
#
#     def __radd__(self, other):
#         other = Fraction(str(other))
#         new_object = Fraction(self.ch * other.zn + other.ch * self.zn,
#                               self.zn * other.zn)
#         return new_object
#
#     def __sub__(self, other):
#         other = Fraction(str(other))
#         new_object = Fraction(self.ch * other.zn - other.ch * self.zn,
#                               self.zn * other.zn)
#         return new_object
#
#     def __rsub__(self, other):
#         other = Fraction(str(other))
#         new_object = Fraction(other.ch * self.zn - self.ch * other.zn,
#                               self.zn * other.zn)
#         return new_object
#
#     def __iadd__(self, other):
#         other = Fraction(str(other))
#         self.ch = self.ch * other.zn + other.ch * self.zn
#         self.zn = self.zn * other.zn
#         self._nod()
#         return self
#
#     def __isub__(self, other):
#         other = Fraction(str(other))
#         self.ch = self.ch * other.zn - other.ch * self.zn
#         self.zn = self.zn * other.zn
#         self._nod()
#         return self
#
#     def __mul__(self, other):
#         other = Fraction(str(other))
#         new_object = Fraction(self.ch * other.ch,
#                               self.zn * other.zn)
#         return new_object
#
#     def __rmul__(self, other):
#         other = Fraction(str(other))
#         new_object = Fraction(self.ch * other.ch,
#                               self.zn * other.zn)
#         return new_object
#
#     def __truediv__(self, other):
#         other = Fraction(str(other))
#         new_object = Fraction(self.ch * other.zn,
#                               self.zn * other.ch)
#         return new_object
#
#     def __rtruediv__(self, other):
#         other = Fraction(str(other))
#         new_object = Fraction(self.zn * other.ch,
#                               self.ch * other.zn)
#         return new_object
#
#     def __imul__(self, other):
#         other = Fraction(str(other))
#         self.ch = self.ch * other.ch
#         self.zn = self.zn * other.zn
#         self._nod()
#         return self
#
#     def __itruediv__(self, other):
#         other = Fraction(str(other))
#         self.ch = self.ch * other.zn
#         self.zn = self.zn * other.ch
#         self._nod()
#         return self
#
#     def reverse(self):
#         self.ch, self.zn = self.zn, self.ch
#         self._nod()
#         return self
#
#     def __gt__(self, other):
#         other = Fraction(str(other))
#         ch1 = self.ch * other.zn
#         ch2 = other.ch * self.zn
#         if ch1 > ch2:
#             return True
#         else:
#             return False
#
#     def __lt__(self, other):
#         other = Fraction(str(other))
#         ch1 = self.ch * other.zn
#         ch2 = other.ch * self.zn
#         if ch1 < ch2:
#             return True
#         else:
#             return False
#
#     def __le__(self, other):
#         other = Fraction(str(other))
#         ch1 = self.ch * other.zn
#         ch2 = other.ch * self.zn
#         if ch1 <= ch2:
#             return True
#         else:
#             return False
#
#     def __eq__(self, other):
#         other = Fraction(str(other))
#         ch1 = self.ch * other.zn
#         ch2 = other.ch * self.zn
#         if ch1 == ch2:
#             return True
#         else:
#             return False
#
#     def __ge__(self, other):
#         other = Fraction(str(other))
#         ch1 = self.ch * other.zn
#         ch2 = other.ch * self.zn
#         if ch1 >= ch2:
#             return True
#         else:
#             return False
#
#     def __ne__(self, other):
#         other = Fraction(str(other))
#         ch1 = self.ch * other.zn
#         ch2 = other.ch * self.zn
#         if ch1 != ch2:
#             return True
#         else:
#             return False
